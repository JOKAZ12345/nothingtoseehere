#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoccerDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="soccer")]
	public partial class soccerDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompetition(Competition instance);
    partial void UpdateCompetition(Competition instance);
    partial void DeleteCompetition(Competition instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public soccerDBDataContext() : 
				base(global::SoccerDB.Properties.Settings.Default.soccerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public soccerDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public soccerDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public soccerDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public soccerDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Competition> Competitions
		{
			get
			{
				return this.GetTable<Competition>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AVG_AWAY_GOALS")]
		public ISingleResult<AVG_AWAY_GOALSResult> AVG_AWAY_GOALS([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, start_date, final_date);
			return ((ISingleResult<AVG_AWAY_GOALSResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AVG_AWAY_TEAM")]
		public ISingleResult<AVG_AWAY_TEAMResult> AVG_AWAY_TEAM([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string away, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, away, final_date, start_date);
			return ((ISingleResult<AVG_AWAY_TEAMResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AVG_GOALS_GAME")]
		public ISingleResult<AVG_GOALS_GAMEResult> AVG_GOALS_GAME([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] ref System.Nullable<double> avg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, final_date, start_date, avg);
			avg = ((System.Nullable<double>)(result.GetParameterValue(3)));
			return ((ISingleResult<AVG_GOALS_GAMEResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AVG_HOME_GOALS")]
		public ISingleResult<AVG_HOME_GOALSResult> AVG_HOME_GOALS([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, final_date, start_date);
			return ((ISingleResult<AVG_HOME_GOALSResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AVG_HOME_TEAM")]
		public ISingleResult<AVG_HOME_TEAMResult> AVG_HOME_TEAM([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string home, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, home, final_date, start_date);
			return ((ISingleResult<AVG_HOME_TEAMResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.POWER_AWAY")]
		public ISingleResult<POWER_AWAYResult> POWER_AWAY([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string away, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, away, start_date, final_date);
			return ((ISingleResult<POWER_AWAYResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.POWER_HOME")]
		public ISingleResult<POWER_HOMEResult> POWER_HOME([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompetitionName", DbType="VarChar(150)")] string competitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string home, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string final_date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(150)")] string start_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), competitionName, home, final_date, start_date);
			return ((ISingleResult<POWER_HOMEResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competition")]
	public partial class Competition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Country_name;
		
		private System.Nullable<int> _Match_id;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<Country> _Countries;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Team> _Team;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountry_nameChanging(string value);
    partial void OnCountry_nameChanged();
    partial void OnMatch_idChanging(System.Nullable<int> value);
    partial void OnMatch_idChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Competition()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Team = default(EntityRef<Team>);
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Country = default(EntityRef<Country>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_name", DbType="VarChar(150)")]
		public string Country_name
		{
			get
			{
				return this._Country_name;
			}
			set
			{
				if ((this._Country_name != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_nameChanging(value);
					this.SendPropertyChanging();
					this._Country_name = value;
					this.SendPropertyChanged("Country_name");
					this.OnCountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_id", DbType="Int")]
		public System.Nullable<int> Match_id
		{
			get
			{
				return this._Match_id;
			}
			set
			{
				if ((this._Match_id != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatch_idChanging(value);
					this.SendPropertyChanging();
					this._Match_id = value;
					this.SendPropertyChanged("Match_id");
					this.OnMatch_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Country", Storage="_Countries", ThisKey="Name", OtherKey="Competition_name")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Matches", ThisKey="Name", OtherKey="Competition_name")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Team", Storage="_Team", ThisKey="Name", OtherKey="Name", IsUnique=true, IsForeignKey=false)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Competition = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Competition = this;
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Team1", Storage="_Teams", ThisKey="Name", OtherKey="compName")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Competition", Storage="_Country", ThisKey="Country_name", OtherKey="Name", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Competitions.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Competitions.Add(this);
						this._Country_name = value.Name;
					}
					else
					{
						this._Country_name = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Competition", Storage="_Match", ThisKey="Match_id", OtherKey="id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Competitions.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Competitions.Add(this);
						this._Match_id = value.id;
					}
					else
					{
						this._Match_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Competition1 = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Competition1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Competition_name;
		
		private EntitySet<Competition> _Competitions;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompetition_nameChanging(string value);
    partial void OnCompetition_nameChanged();
    #endregion
		
		public Country()
		{
			this._Competitions = new EntitySet<Competition>(new Action<Competition>(this.attach_Competitions), new Action<Competition>(this.detach_Competitions));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Competition = default(EntityRef<Competition>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_name", DbType="VarChar(150)")]
		public string Competition_name
		{
			get
			{
				return this._Competition_name;
			}
			set
			{
				if ((this._Competition_name != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetition_nameChanging(value);
					this.SendPropertyChanging();
					this._Competition_name = value;
					this.SendPropertyChanged("Competition_name");
					this.OnCompetition_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Competition", Storage="_Competitions", ThisKey="Name", OtherKey="Country_name")]
		public EntitySet<Competition> Competitions
		{
			get
			{
				return this._Competitions;
			}
			set
			{
				this._Competitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Team", Storage="_Teams", ThisKey="Name", OtherKey="Country_name")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Country", Storage="_Competition", ThisKey="Competition_name", OtherKey="Name", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._Competition_name = value.Name;
					}
					else
					{
						this._Competition_name = default(string);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Country", Storage="_Team", ThisKey="Name", OtherKey="Name", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Country = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Country = this;
						this._Name = value.Name;
					}
					else
					{
						this._Name = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _Home_team;
		
		private string _Away_team;
		
		private string _Competition_name;
		
		private System.Nullable<int> _away_goals;
		
		private System.Nullable<int> _home_goals;
		
		private System.Nullable<char> _final_result;
		
		private EntitySet<Competition> _Competitions;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnHome_teamChanging(string value);
    partial void OnHome_teamChanged();
    partial void OnAway_teamChanging(string value);
    partial void OnAway_teamChanged();
    partial void OnCompetition_nameChanging(string value);
    partial void OnCompetition_nameChanged();
    partial void Onaway_goalsChanging(System.Nullable<int> value);
    partial void Onaway_goalsChanged();
    partial void Onhome_goalsChanging(System.Nullable<int> value);
    partial void Onhome_goalsChanged();
    partial void Onfinal_resultChanging(System.Nullable<char> value);
    partial void Onfinal_resultChanged();
    #endregion
		
		public Match()
		{
			this._Competitions = new EntitySet<Competition>(new Action<Competition>(this.attach_Competitions), new Action<Competition>(this.detach_Competitions));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Competition = default(EntityRef<Competition>);
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Home_team", DbType="VarChar(150)")]
		public string Home_team
		{
			get
			{
				return this._Home_team;
			}
			set
			{
				if ((this._Home_team != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHome_teamChanging(value);
					this.SendPropertyChanging();
					this._Home_team = value;
					this.SendPropertyChanged("Home_team");
					this.OnHome_teamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Away_team", DbType="VarChar(150)")]
		public string Away_team
		{
			get
			{
				return this._Away_team;
			}
			set
			{
				if ((this._Away_team != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAway_teamChanging(value);
					this.SendPropertyChanging();
					this._Away_team = value;
					this.SendPropertyChanged("Away_team");
					this.OnAway_teamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competition_name", DbType="VarChar(150)")]
		public string Competition_name
		{
			get
			{
				return this._Competition_name;
			}
			set
			{
				if ((this._Competition_name != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetition_nameChanging(value);
					this.SendPropertyChanging();
					this._Competition_name = value;
					this.SendPropertyChanged("Competition_name");
					this.OnCompetition_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_away_goals", DbType="Int")]
		public System.Nullable<int> away_goals
		{
			get
			{
				return this._away_goals;
			}
			set
			{
				if ((this._away_goals != value))
				{
					this.Onaway_goalsChanging(value);
					this.SendPropertyChanging();
					this._away_goals = value;
					this.SendPropertyChanged("away_goals");
					this.Onaway_goalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_home_goals", DbType="Int")]
		public System.Nullable<int> home_goals
		{
			get
			{
				return this._home_goals;
			}
			set
			{
				if ((this._home_goals != value))
				{
					this.Onhome_goalsChanging(value);
					this.SendPropertyChanging();
					this._home_goals = value;
					this.SendPropertyChanged("home_goals");
					this.Onhome_goalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_final_result", DbType="Char(1)")]
		public System.Nullable<char> final_result
		{
			get
			{
				return this._final_result;
			}
			set
			{
				if ((this._final_result != value))
				{
					this.Onfinal_resultChanging(value);
					this.SendPropertyChanging();
					this._final_result = value;
					this.SendPropertyChanged("final_result");
					this.Onfinal_resultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Competition", Storage="_Competitions", ThisKey="id", OtherKey="Match_id")]
		public EntitySet<Competition> Competitions
		{
			get
			{
				return this._Competitions;
			}
			set
			{
				this._Competitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Team", Storage="_Teams", ThisKey="id", OtherKey="Game_id")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Competition", ThisKey="Competition_name", OtherKey="Name", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Competition_name = value.Name;
					}
					else
					{
						this._Competition_name = default(string);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Team", ThisKey="Home_team", OtherKey="Name", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Home_team = value.Name;
					}
					else
					{
						this._Home_team = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Team1", ThisKey="Away_team", OtherKey="Name", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._Away_team = value.Name;
					}
					else
					{
						this._Away_team = default(string);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Country_name;
		
		private System.Nullable<int> _Game_id;
		
		private string _Alternative_Name;
		
		private string _compName;
		
		private EntityRef<Country> _Country;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Country> _Country1;
		
		private EntityRef<Competition> _Competition1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountry_nameChanging(string value);
    partial void OnCountry_nameChanged();
    partial void OnGame_idChanging(System.Nullable<int> value);
    partial void OnGame_idChanged();
    partial void OnAlternative_NameChanging(string value);
    partial void OnAlternative_NameChanged();
    partial void OncompNameChanging(string value);
    partial void OncompNameChanged();
    #endregion
		
		public Team()
		{
			this._Country = default(EntityRef<Country>);
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Match = default(EntityRef<Match>);
			this._Competition = default(EntityRef<Competition>);
			this._Country1 = default(EntityRef<Country>);
			this._Competition1 = default(EntityRef<Competition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_name", DbType="VarChar(150)")]
		public string Country_name
		{
			get
			{
				return this._Country_name;
			}
			set
			{
				if ((this._Country_name != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_nameChanging(value);
					this.SendPropertyChanging();
					this._Country_name = value;
					this.SendPropertyChanged("Country_name");
					this.OnCountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_id", DbType="Int")]
		public System.Nullable<int> Game_id
		{
			get
			{
				return this._Game_id;
			}
			set
			{
				if ((this._Game_id != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_idChanging(value);
					this.SendPropertyChanging();
					this._Game_id = value;
					this.SendPropertyChanged("Game_id");
					this.OnGame_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alternative_Name", DbType="VarChar(150)")]
		public string Alternative_Name
		{
			get
			{
				return this._Alternative_Name;
			}
			set
			{
				if ((this._Alternative_Name != value))
				{
					this.OnAlternative_NameChanging(value);
					this.SendPropertyChanging();
					this._Alternative_Name = value;
					this.SendPropertyChanged("Alternative_Name");
					this.OnAlternative_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compName", DbType="VarChar(150)")]
		public string compName
		{
			get
			{
				return this._compName;
			}
			set
			{
				if ((this._compName != value))
				{
					if (this._Competition1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompNameChanging(value);
					this.SendPropertyChanging();
					this._compName = value;
					this.SendPropertyChanged("compName");
					this.OncompNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Country", Storage="_Country", ThisKey="Name", OtherKey="Name", IsUnique=true, IsForeignKey=false)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Team = null;
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Team = this;
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Matches", ThisKey="Name", OtherKey="Home_team")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Matches1", ThisKey="Name", OtherKey="Away_team")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Team", Storage="_Match", ThisKey="Game_id", OtherKey="id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._Game_id = value.id;
					}
					else
					{
						this._Game_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Team", Storage="_Competition", ThisKey="Name", OtherKey="Name", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.Team = null;
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.Team = this;
						this._Name = value.Name;
					}
					else
					{
						this._Name = default(string);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Team", Storage="_Country1", ThisKey="Country_name", OtherKey="Name", IsForeignKey=true)]
		public Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				Country previousValue = this._Country1.Entity;
				if (((previousValue != value) 
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._Country_name = value.Name;
					}
					else
					{
						this._Country_name = default(string);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Team1", Storage="_Competition1", ThisKey="compName", OtherKey="Name", IsForeignKey=true)]
		public Competition Competition1
		{
			get
			{
				return this._Competition1.Entity;
			}
			set
			{
				Competition previousValue = this._Competition1.Entity;
				if (((previousValue != value) 
							|| (this._Competition1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition1.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Competition1.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._compName = value.Name;
					}
					else
					{
						this._compName = default(string);
					}
					this.SendPropertyChanged("Competition1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
	}
	
	public partial class AVG_AWAY_GOALSResult
	{
		
		private System.Nullable<double> _Média_golos_marcados_fora;
		
		private System.Nullable<double> _Média_golos_sofridos_fora;
		
		public AVG_AWAY_GOALSResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Média golos marcados fora]", Storage="_Média_golos_marcados_fora", DbType="Float")]
		public System.Nullable<double> Média_golos_marcados_fora
		{
			get
			{
				return this._Média_golos_marcados_fora;
			}
			set
			{
				if ((this._Média_golos_marcados_fora != value))
				{
					this._Média_golos_marcados_fora = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Média golos sofridos fora]", Storage="_Média_golos_sofridos_fora", DbType="Float")]
		public System.Nullable<double> Média_golos_sofridos_fora
		{
			get
			{
				return this._Média_golos_sofridos_fora;
			}
			set
			{
				if ((this._Média_golos_sofridos_fora != value))
				{
					this._Média_golos_sofridos_fora = value;
				}
			}
		}
	}
	
	public partial class AVG_AWAY_TEAMResult
	{
		
		private string _FORA;
		
		private System.Nullable<int> _A_FAVOR;
		
		private System.Nullable<double> ___MARCADOS;
		
		private System.Nullable<int> _CONTRA;
		
		private System.Nullable<double> ___SOFRIDOS;
		
		public AVG_AWAY_TEAMResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FORA", DbType="VarChar(150)")]
		public string FORA
		{
			get
			{
				return this._FORA;
			}
			set
			{
				if ((this._FORA != value))
				{
					this._FORA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[A FAVOR]", Storage="_A_FAVOR", DbType="Int")]
		public System.Nullable<int> A_FAVOR
		{
			get
			{
				return this._A_FAVOR;
			}
			set
			{
				if ((this._A_FAVOR != value))
				{
					this._A_FAVOR = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[% MARCADOS]", Storage="___MARCADOS", DbType="Float")]
		public System.Nullable<double> @__MARCADOS
		{
			get
			{
				return this.___MARCADOS;
			}
			set
			{
				if ((this.___MARCADOS != value))
				{
					this.___MARCADOS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTRA", DbType="Int")]
		public System.Nullable<int> CONTRA
		{
			get
			{
				return this._CONTRA;
			}
			set
			{
				if ((this._CONTRA != value))
				{
					this._CONTRA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[% SOFRIDOS]", Storage="___SOFRIDOS", DbType="Float")]
		public System.Nullable<double> @__SOFRIDOS
		{
			get
			{
				return this.___SOFRIDOS;
			}
			set
			{
				if ((this.___SOFRIDOS != value))
				{
					this.___SOFRIDOS = value;
				}
			}
		}
	}
	
	public partial class AVG_GOALS_GAMEResult
	{
		
		private System.Nullable<double> _Column1;
		
		public AVG_GOALS_GAMEResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Float")]
		public System.Nullable<double> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class AVG_HOME_GOALSResult
	{
		
		private System.Nullable<double> _Média_golos_marcados_casa;
		
		private System.Nullable<double> _Média_golos_sofridos_casa;
		
		public AVG_HOME_GOALSResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Média golos marcados casa]", Storage="_Média_golos_marcados_casa", DbType="Float")]
		public System.Nullable<double> Média_golos_marcados_casa
		{
			get
			{
				return this._Média_golos_marcados_casa;
			}
			set
			{
				if ((this._Média_golos_marcados_casa != value))
				{
					this._Média_golos_marcados_casa = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Média golos sofridos casa]", Storage="_Média_golos_sofridos_casa", DbType="Float")]
		public System.Nullable<double> Média_golos_sofridos_casa
		{
			get
			{
				return this._Média_golos_sofridos_casa;
			}
			set
			{
				if ((this._Média_golos_sofridos_casa != value))
				{
					this._Média_golos_sofridos_casa = value;
				}
			}
		}
	}
	
	public partial class AVG_HOME_TEAMResult
	{
		
		private string _CASA;
		
		private System.Nullable<int> _A_FAVOR;
		
		private System.Nullable<double> ___MARCADOS;
		
		private System.Nullable<int> _CONTRA;
		
		private System.Nullable<double> ___SOFRIDOS;
		
		public AVG_HOME_TEAMResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CASA", DbType="VarChar(150)")]
		public string CASA
		{
			get
			{
				return this._CASA;
			}
			set
			{
				if ((this._CASA != value))
				{
					this._CASA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[A FAVOR]", Storage="_A_FAVOR", DbType="Int")]
		public System.Nullable<int> A_FAVOR
		{
			get
			{
				return this._A_FAVOR;
			}
			set
			{
				if ((this._A_FAVOR != value))
				{
					this._A_FAVOR = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[% MARCADOS]", Storage="___MARCADOS", DbType="Float")]
		public System.Nullable<double> @__MARCADOS
		{
			get
			{
				return this.___MARCADOS;
			}
			set
			{
				if ((this.___MARCADOS != value))
				{
					this.___MARCADOS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTRA", DbType="Int")]
		public System.Nullable<int> CONTRA
		{
			get
			{
				return this._CONTRA;
			}
			set
			{
				if ((this._CONTRA != value))
				{
					this._CONTRA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[% SOFRIDOS]", Storage="___SOFRIDOS", DbType="Float")]
		public System.Nullable<double> @__SOFRIDOS
		{
			get
			{
				return this.___SOFRIDOS;
			}
			set
			{
				if ((this.___SOFRIDOS != value))
				{
					this.___SOFRIDOS = value;
				}
			}
		}
	}
	
	public partial class POWER_AWAYResult
	{
		
		private string _FORA;
		
		private System.Nullable<double> _PODER_ATAQUE;
		
		private System.Nullable<double> _PODER_DEFENSIVO;
		
		public POWER_AWAYResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FORA", DbType="VarChar(150)")]
		public string FORA
		{
			get
			{
				return this._FORA;
			}
			set
			{
				if ((this._FORA != value))
				{
					this._FORA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[PODER ATAQUE]", Storage="_PODER_ATAQUE", DbType="Float")]
		public System.Nullable<double> PODER_ATAQUE
		{
			get
			{
				return this._PODER_ATAQUE;
			}
			set
			{
				if ((this._PODER_ATAQUE != value))
				{
					this._PODER_ATAQUE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[PODER DEFENSIVO]", Storage="_PODER_DEFENSIVO", DbType="Float")]
		public System.Nullable<double> PODER_DEFENSIVO
		{
			get
			{
				return this._PODER_DEFENSIVO;
			}
			set
			{
				if ((this._PODER_DEFENSIVO != value))
				{
					this._PODER_DEFENSIVO = value;
				}
			}
		}
	}
	
	public partial class POWER_HOMEResult
	{
		
		private string _CASA;
		
		private System.Nullable<double> _PODER_ATAQUE;
		
		private System.Nullable<double> _PODER_DEFENSIVO;
		
		public POWER_HOMEResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CASA", DbType="VarChar(150)")]
		public string CASA
		{
			get
			{
				return this._CASA;
			}
			set
			{
				if ((this._CASA != value))
				{
					this._CASA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[PODER ATAQUE]", Storage="_PODER_ATAQUE", DbType="Float")]
		public System.Nullable<double> PODER_ATAQUE
		{
			get
			{
				return this._PODER_ATAQUE;
			}
			set
			{
				if ((this._PODER_ATAQUE != value))
				{
					this._PODER_ATAQUE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[PODER DEFENSIVO]", Storage="_PODER_DEFENSIVO", DbType="Float")]
		public System.Nullable<double> PODER_DEFENSIVO
		{
			get
			{
				return this._PODER_DEFENSIVO;
			}
			set
			{
				if ((this._PODER_DEFENSIVO != value))
				{
					this._PODER_DEFENSIVO = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
